http {
	lua_shared_dict _ups_zone 64m; # 定义upstream共享内存空间
	...
	upstream qq_backend{
		server 14.17.42.40;
		server 14.17.32.211;
		server 59.37.96.63;
	}
 
	server {
		listen       80;
		server_name  www.qq.com *.qq.com;
		access_log  off;
 
		# 更新 upstream API 接口
		location = /ups_update {
			content_by_lua_block {
				local ups = ngx.req.get_uri_args()["ups"]
				if ups == nil then
					ngx.say("usage: /ups_update?ups=x.x.x.x")
					return
				end
				local host = ngx.var.http_host
				local ups_from = ngx.shared._ups_zone:get(host);
				ngx.log(ngx.WARN, host, " update upstream from ", ups_from, " to ", ups)
				ngx.shared._ups_zone:set(host, ups);
				ngx.say(host, " update upstream from ", ups_from, " to ", ups)
			}
		}
		location / {
			# 动态设置当前 upstream, 未设置则使用默认 upstream
			set_by_lua $cur_ups {
				local ups = ngx.shared._ups_zone:get(ngx.var.http_host)
				if ups ~= nil then
					ngx.log(ngx.ERR, "get [", ups, "] from ngx.shared._ups_zone")
					return ups
				end
				--ngx.log(ngx.INFO, "use default upstream");
				return "qq_backend";
			}
			proxy_next_upstream off;
			proxy_set_header    Host $host;
			proxy_http_version  1.1;
			proxy_set_header    Connection  "";
			proxy_pass $scheme://$cur_ups;
		}
	}
}
